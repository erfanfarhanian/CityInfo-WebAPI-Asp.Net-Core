// <auto-generated />
using CityInfo.API.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityInfo.API.Migrations
{
    [DbContext(typeof(CityInfoDBContext))]
    [Migration("20240410213447_MySeedData")]
    partial class MySeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("CityInfo.API.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "This is Tehran.",
                            Name = "Tehran"
                        },
                        new
                        {
                            ID = 2,
                            Description = "This is Shiraz.",
                            Name = "Shiraz"
                        },
                        new
                        {
                            ID = 3,
                            Description = "This is Tabriz.",
                            Name = "Tabriz"
                        });
                });

            modelBuilder.Entity("CityInfo.API.Entities.PointOfInterest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("PointsOfInterest");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CityID = 1,
                            Description = "This is first point of interest for Tehran",
                            Name = "First Point"
                        },
                        new
                        {
                            ID = 2,
                            CityID = 1,
                            Description = "This is second point of interest for Tehran",
                            Name = "Second Point"
                        },
                        new
                        {
                            ID = 3,
                            CityID = 1,
                            Description = "This is third point of interest for Tehran",
                            Name = "Third Point"
                        });
                });

            modelBuilder.Entity("CityInfo.API.Entities.PointOfInterest", b =>
                {
                    b.HasOne("CityInfo.API.Entities.City", "City")
                        .WithMany("pointOfInterest")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CityInfo.API.Entities.City", b =>
                {
                    b.Navigation("pointOfInterest");
                });
#pragma warning restore 612, 618
        }
    }
}
